
class Solution 
{
    public:
    //Function to find distance of nearest 1 in the grid for each cell.
	 vector<vector<int>>nearest(vector<vector<int>>grid)
    {
        // Code here
        //Hii Everyone
        //To solve this question we need to find nearest 1's if present to each cell
        //int the matrix 
        
        //to solve this I will use BFS
        
        int n,m;
        n=grid.size();
        m=grid[0].size();
        
        queue<pair<int,pair<int,int>>>q;
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==1)
                {
                    q.push({0,{i,j}});
                }
            }
        }
        
        vector<vector<int>>ans(n,vector<int>(m,INT_MAX));
        
        while(q.empty()==false)
        {
            int d=q.front().first;
            int x=q.front().second.first;
            int y=q.front().second.second;
            ans[x][y]=min(ans[x][y],d);
            q.pop();
            if(x-1>=0 and ans[x-1][y]>d+1)
            {
                ans[x-1][y]=d+1;
                q.push({d+1,{x-1,y}});
            }
            if(x+1<n and ans[x+1][y]>d+1)
            {
                ans[x+1][y]=d+1;
                q.push({d+1,{x+1,y}});
            }
            if(y-1>=0 and ans[x][y-1]>d+1)
            {
                ans[x][y-1]=d+1;
                q.push({d+1,{x,y-1}});
            }
            if(y+1<m and ans[x][y+1]>d+1)
            {
                ans[x][y+1]=d+1;
                q.push({d+1,{x,y+1}});
            }
        }
        return ans;
    }
};
